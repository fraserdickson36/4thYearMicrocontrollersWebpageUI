asyncapi: "2.0.0"
info:
  title: "BigBoiTeam IoT"
  version: "1.0.0"
  description: |
    This document contains the documentation required to describe and understand the BigBoiTeam IoT API. This documentation is for the first production version (version 1.0.0).
servers: 
  FastBoiiii:
    url: IP 20.56.121.212
    description: |
      This is the address to Azure virtual machine on which the mosquitto broker is hosted.
    protocol: mqtt

########################################################
####################### Channels ####################### 
########################################################
channels:
  # Trigger Topic
  system/building/room/trigger/MAC-address:
    description: This topics allows the IoT devices to publish their trigger messages to be read by another client subscribed to the topic
    publish:
      message: 
        $ref: '#/components/messages/trigger'
  
  # Action Topic
  system/building/room/action/MAC-address:
    description: This topic allows the IoT devices to receive their action messages by subscribing to their individual topic.
    subscribe:
      message:
        $ref: '#/components/messages/action'

  # Birth Topic
  system/building/room/birth/MAC-address:
    description: This is the topic on which the IoT device will publish its birth message once for every connection to the network.
    publish:
      message:
        $ref: '#/components/messages/birth'

  # Will Topic
  system/building/room/will/MAC-address:
    description: After configuration from the IoT device side, the broker will publish the pre-determined message to the topic upon the disconnection of the IoT device to the network.
    publish:
      message:
        $ref: '#/components/messages/will'
        
########################################################
###################### Components ###################### 
########################################################
components:
  messages:
    trigger:
      payload: 
        $ref: '#/components/schemas/trigger'
    action:
      payload:
        $ref: '#/components/schemas/action'
    birth:
      payload:
        $ref: '#/components/schemas/birth'
    will:
      payload:
        $ref: '#/components/schemas/will'
  
  ##################### Schemas #####################
  schemas:
    ###################################################
    ##################### Trigger #####################
    ###################################################
    trigger:
      description: "The payload is a JSON object to allow for easier processing using JavaScript. The object has 2 key/value pairs. The first pair shows the peripheral type and in some cases its number. The second pair provides information about the trigger generated from the peripheral. \n\n The JSON object is formated as such {'peripheral': 'peripheralType','trigger':'triggerType'}. It is imporatant to note that only trigger peripherals are allowed for JSON objects sent to and from this topic."
      type: object
      examples:
        - "{'peripheral': 'button1','trigger':'pressTime-4'}"
        - "{'peripheral': 'potentiometer','trigger':'percentage-056'}"
      # This will now list the 2 different key/value pairs of the JSON Object
      properties:
        ########## Peripheral ##########
        Peripheral: 
          description: This part of the JSON object provides information about the peripheral type and in some cases peripheral number that generated the trigger. This can be one of the following peripheral types.
          type: string
          oneOf:
            - $ref: '#/components/schemas/ButtonN'
            - $ref: '#/components/schemas/Potentiometer'
            - $ref: '#/components/schemas/Thermometer'

          

        ########## Trigger ##########
        Trigger:
          description: This part of the JSON object provides information about the type of trigger generated by the peripheral. This can be one of the following trigger types.
          type: string
          oneOf:
            - $ref: '#/components/schemas/Button Trigger'
            - $ref: '#/components/schemas/Potentiometer Trigger'
            - $ref: '#/components/schemas/Thermometer Trigger'
    
    # Peripherals schemas
    ButtonN:
      type: string
      description: The possible trigger peripherals for the button type peripherals where N is the button number.
      enum:
      - button1
      - button2
      - button3
      
    Potentiometer:
      type: string
      description: The potentiometer is one of the available trigger peripherals supported by the API.
      enum:
      - potentiometer
      
    Thermometer:
      type: string
      description: The thermometer is one of the available trigger peripherals supported by the API.
      enum:
      - thermometer
      
    # Trigger schemas  
    Button Trigger:
        type: string
        description: All the possible message options for the button triggers can be seen below. 'Press-X' is when the button is pressed for an 'X' amount of times (1 or 2). 'PressTime-X' is when the button is pressed for an 'X' amount seconds (2 or 4). 
        enum:
        - Press-1
        - Press-2
        - PressTime-2
        - PressTime-4
                
    Potentiometer Trigger:
        type: string
        description: The associated payload for a potentiometer trigger is a string containing a percentage between 0% to 100% in one percent increments. The string is formated as follows 'percentage-xxx' where xxx is the integer percentage value.
        minimum: 0
        maximum: 100
        default: 0
        enum:
        - "percentage-000"
        - "percentage-001"
        - "percentage-002"
        - "percentage-..."
        - "percentage-098"
        - "percentage-099"
        - "percentage-100"
        
    Thermometer Trigger:
        type: string
        description: The thermometer value is sent as a string following a similar format than the potentiometer trigger. The message is is formated as 'temperature-Sxxx'. The 'S' is the sign of the registered temperature (either positive or negative). The temperature then follows the sign in Celcius.
        enum:
        - "temperature--999"
        - "temperature--998"
        - "temperature--997"
        - "temperature--..."
        - "temperature-+000"
        - "temperature-+001"
        - "temperature-+002"
        - "temperature-+..."
        - "temperature-+997"
        - "temperature-+998"
        - "temperature-+999"

        
    ##################################################
    ##################### Action #####################
    ##################################################
    action:
      type: object
      description: 'The supported payloads for the action topic are all simple strings to be processed by the target IoT devices. The string is sepparated into two seperate parts. The first part is the peripheral name and the second part which is separated by a dash is the requested action by the peripheral. The action message is composed of 2 sections. The peripheral name (eg. rgbled) and the action (eg. rtime-5). The two elements are joined by a "-".'
      examples:
        - rgbled-red-080-1
        - rgbled-rtime-5
        - led1-onPerC-50
      properties:
        # Peripherals
        Peripheral:
          type: string
          description: The available peripheral codes can be seen below.
          enum:
            - PWM_LED
            - RGB_LED
            - Buzzer
        # Actions
        Action:
          type: string
          description: Peripherals have different possible types of actions associated to them. These are presented here.
          oneOf:
            - $ref: '#/components/schemas/ledX'
            - $ref: '#/components/schemas/rgbled'
            - $ref: '#/components/schemas/Buzzer'
    
    # Action Schemas
    ledX:
          type: string
          description: The Pulse Width Modulation (PWM) LEDs have 4 different types of actions associated to them. The specific LED is selected through the 'X' part of its name (i.e. led1 for LED 1 for example). The LEDs can be turned off or turn on continuously at a given percentage of brightness, 'xxx' between 000% and 100% in 001% steps. The LED can also be turned on for 'xx' seconds (between 0 and 60 seconds). The LED can also act as a breathing LED with a frequency of 0.16 Hz for 'xx' seconds.
          enum: 
          - onPerC-xxx
          - onTime-xx
          - breath-xx

          
    rgbled:
          type: string
          description: The RGB LEDs have 11 different types of actions associated with them. The Red, Green and Blue LEDs can have their brightness controlled as a percentage (colour-xxx-Y where 'xxx' is between 000% and 100%). This can be done either by either leaving the other LEDs turned on or by turning off the other LEDs (Y = 1 only the one LED, Y = 0 others stay on). The LEDs can be turned off individually (colour-0). The brightness of all the LEDs can also be controlled simultaneously (bright-xxx). This means that to turn off all the LEDs, the following string can be used (bright-0). The LEDs can also be turned on individually for a xx amont of seconds (xx between 01 and 60 seconds). 
          enum:
          - red-xxx-Y
          - green-xxx-Y
          - blue-xxx-Y
          - red-0
          - green-0
          - blue-0
          - bright-xxx
          - bright-0
          - rtime-xx
          - gtime-xx
          - btime-xx
          
    Buzzer:
          type: string
          desciption: The API allows the a message to be sent to turn on the buzzer for 'xx' seconds (01 min and 60 max). It also supports the buzzer to buzz at a given period, 'xx' (between 1 and 60 seconds) for 'xx' seconds.
          enum: 
          - onTime-xx
          - onOff-xx-yy
          
    #################################################
    ##################### Birth #####################
    #################################################
    birth:
      type: object
      description: 'The birth message is a JSON object comprised of 4 key/value pairs. These are explained in this section'
      examples:
        - "{'MAC_Address': '00:0a:95:9d:68:16','Manufacturer':'bigboiteam', 'MCU':'MSP430FR4133', 'Device':'Bathroom RGB Light'}"
      properties:
        # Peripherals
        MAC Address:
          type: string
          description: This is the unique MAC address of the device.
        Manufacturer:
          type: string
          description: This is the manufacturer name of the device.
        MCU:
          type: string
          description: This is the type of the main MCU used for the device.
        Device:
          type: string
          description: This is the name of the device used.
          
    #################################################
    ##################### Will #####################
    #################################################
    will:
      type: object
      description: 'The will message is a JSON object comprised of 4 key/value pairs. These are explained in this section'
      examples:
        - "{'MAC_Address': '00:0a:95:9d:68:16','Manufacturer':'bigboiteam', 'MCU':'MSP430FR4133', 'Device':'Bathroom RGB Light'}"
      properties:
        # Peripherals
        MAC Address:
          type: string
          description: This is the unique MAC address of the device.
        Manufacturer:
          type: string
          description: This is the manufacturer name of the device.
        MCU:
          type: string
          description: This is the type of the main MCU used for the device.
        Device:
          type: string
          description: This is the name of the device used.
          

######################### No Idea What This Is #########################
  parameters:
    DeviceID:
      description: The microcontroller ID subscribed to topic
      schema:
        type: string
        minimum: 1   
    Room:
      description: Room ID
      schema:
        type: integer
        minimum: 1
    Building:
      description: Building ID
      schema:
        type: integer
        minimum: 1
    System:
      description: System
      schema:
        type: string
        description: only one whole system is built for the current project though it could be broaden up
 


